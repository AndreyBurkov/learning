Apache Kafka использует Zookeeper для выполнения ряда ключевых функций, связанных с управлением и координацией
в распределённых системах. Вот основные причины, по которым Kafka требует Zookeeper:

### 1. **Управление метаданными**
Zookeeper хранит информацию о конфигурации топиков, партициях и других метаданных Kafka. Это помогает Kafka
определять, какие брокеры содержат какие партиции и как они организованы.

### 2. **Координация брокеров**
В распределённой системе множество брокеров по отдельности обрабатывают сообщения. Zookeeper следит за
состоянием всех брокеров (например, работает ли брокер или отключён) и обеспечивает возможность их координации.

### 3. **Лидерство партиций**
Каждая партиция в Kafka управляется одним лидером, и Zookeeper отвечает за выбор лидера для каждой партиции.
Если текущий лидер выходит из строя, Zookeeper назначает новый лидер для обеспечения непрерывности работы.

### 4. **Синхронизация состояния**
Zookeeper помогает синхронизировать процессы внутри Kafka, обеспечивая единую точку правды для всей системы
о том, какое состояние у каждого брокера и партиции.

### 5. **Конфигурация**
Zookeeper также используется для хранения конфигурации Kafka, что позволяет динамически изменять настройки
системы без необходимости перезапуска брокеров.

### 6. **Группы потребителей**
Zookeeper следит за состоянием групп потребителей, координируя распределение партиций между ними и позволяя
динамически добавлять или удалять потребителей из группы.

### Подведение итогов
Хотя Zookeeper играет важную роль в работе Kafka, стоит отметить, что с выходом Kafka 2.8.0 была добавлена
возможность запуска Kafka в режиме без Zookeeper через KIP-500. Это значит, что в будущих версиях Kafka можно
будет использовать другую архитектуру, но пока Zookeeper остаётся важным компонентом для многих развертываний Kafka.
