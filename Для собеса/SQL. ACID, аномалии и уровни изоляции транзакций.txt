---------------------------------------------------- Аномалии ----------------------------------------------------------
  Аномалии, возникающие при параллельной работе с БД:
1. Dirty Read («грязное чтение»).
Это когда данные, которые я прочитал, кто-то может откатить ещё до того, как я завершу свою транзакцию.
Может привести к несогласованности данных, при записи "грязных данных". Связано именно с ОТКАТОМ изменений другой
транзакцией.

2. Non‑repeatable Read или Fuzzy Read («неповторяющееся чтение»).
Это когда данные, которые я прочитал, кто‑то может изменить ещё до того, как я завершу свою транзакцию.
Т.е. я могу дважды прочитать одни и те же строки в одной транзакции в разное время и получить разный результат,
потому что кто-то параллельно изменил данные. Связано именно с ИЗМЕНЕНИЕМ данных другой транзакцией во время выполнения
первой.

3. Phantom Read ( «фантомное чтение»).
Это когда ряд данных, которые я прочитал, кто‑то может изменить до того, как я завершу свою транзакцию.
Например, я своей первой транзакции прочитал какие‑то строки из БД (например, выбрал все аккаунты с балансом = 0),
а вторая транзакция параллельно добавила новый аккаунт, у которого нулевой баланс — получается, моя первая транзакция
думает, что аккаунтов с нулевым балансом у нас, например, 10, а по факту их будет уже 11.

4. Lost Update (Потерянное обновление).
Это когда две транзакции одновременно читают и изменяют одни и те же данные, и при этом одно из изменений
может потеряться.



-------------------------------------------- Уровни изоляции транзакций ------------------------------------------------



------------------------------------------------------ ACID ------------------------------------------------------------
  Требования ACID — набор требований к транзакционной системе, обеспечивающий наиболее надёжную и предсказуемую её
работу и обеспечивают сохранность ваших данных.

1. Atomicity — Атомарность.
Атомарность гарантирует, что каждая транзакция будет выполнена полностью или не будет выполнена совсем.
Не допускаются промежуточные состояния.

2. Consistency — Согласованность
Транзакция, достигающая своего нормального завершения (EOT — end of transaction, завершение транзакции) и, тем самым,
фиксирующая свои результаты, сохраняет согласованность базы данных. Другими словами, каждая успешная транзакция по
определению фиксирует только допустимые результаты. Например, там, где должны быть положительные числа, будут
только положительные. Например, не будет ссылок на несуществующие внешние ключи.

3. Isolation — Изолированность
Во время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат. Как и она на другие.

4. Durability — Надёжность
Если пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им
изменения не будут отменены из-за какого-либо сбоя. Обесточилась система, произошел сбой в оборудовании?
На выполненную транзакцию это не повлияет. Не потеряется ни одна закоммиченная транзакция.





















