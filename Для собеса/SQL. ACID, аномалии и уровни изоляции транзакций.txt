---------------------------------------------------- Аномалии ----------------------------------------------------------
  Аномалии, возникающие при параллельной работе с БД:
1. Dirty Read («грязное чтение»).
Это когда данные, которые я прочитал, кто-то может откатить ещё до того, как я завершу свою транзакцию.
Может привести к несогласованности данных, при записи "грязных данных". Связано именно с ОТКАТОМ изменений другой
транзакцией.

2. Non‑repeatable Read или Fuzzy Read («неповторяющееся чтение»).
Это когда данные, которые я прочитал, кто‑то может изменить ещё до того, как я завершу свою транзакцию.
Т.е. я могу дважды прочитать одни и те же строки в одной транзакции в разное время и получить разный результат,
потому что кто-то параллельно изменил данные. Связано именно с ИЗМЕНЕНИЕМ данных другой транзакцией во время выполнения
первой.

3. Phantom Read ( «фантомное чтение»).
Это когда ряд данных, которые я прочитал, кто‑то может изменить до того, как я завершу свою транзакцию.
Например, я своей первой транзакции прочитал какие‑то строки из БД (например, выбрал все аккаунты с балансом = 0),
а вторая транзакция параллельно добавила новый аккаунт, у которого нулевой баланс — получается, моя первая транзакция
думает, что аккаунтов с нулевым балансом у нас, например, 10, а по факту их будет уже 11.

4. Lost Update (Потерянное обновление).
Это когда две транзакции одновременно читают и изменяют одни и те же данные, и при этом одно из изменений
может потеряться.



-------------------------------------------- Уровни изоляции транзакций ------------------------------------------------
  Под «уровнем изоляции транзакций» понимается степень обеспечиваемой внутренними механизмами СУБД защиты от всех или
некоторых вышеперечисленных видов аномалий, возникающих при параллельном выполнении транзакций.

1. Read uncommitted (чтение незафиксированных данных).
Это самый слабый уровень изоляции, когда транзакция может видеть результаты других транзакций, даже если они ещё не
закоммичены.
Низший (первый) уровень изоляции. Если несколько параллельных транзакций пытаются изменять одну и ту же строку таблицы,
то в окончательном варианте строка будет иметь значение, определённое всем набором успешно выполненных транзакций.
При этом возможно считывание не только логически несогласованных данных, но и данных, изменения которых ещё
не зафиксированы.
Типичный способ реализации данного уровня изоляции — блокировка данных на время выполнения команды изменения, что
гарантирует, что команды изменения одних и тех же строк, запущенные параллельно, фактически выполняются последовательно,
и ни одно из изменений не потеряется. Транзакции, выполняющие только чтение, при данном уровне изоляции никогда
не блокируются.

2. Read committed (чтение фиксированных данных).
На этом уровне транзакция может читать только те изменения в других параллельных транзакциях, которые уже были
закоммичены. Это нас спасает от грязного чтения, но не спасает от неповторяющегося чтения и от фантомного чтения.
Большинство промышленных СУБД, в частности, Microsoft SQL Server, PostgreSQL и Oracle Database, по умолчанию используют
именно этот уровень. На этом уровне обеспечивается защита от "грязного» чтения", тем не менее, в процессе работы одной
транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы. В итоге первая транзакция будет
работать с другим набором данных.

3. Repeatable read (повторяющееся чтение).
Этот уровень означает, что пока транзакция не завершится, никто параллельно не может изменять или удалять строки,
которые транзакция уже прочитала. Т. е. данные, которые я прочитал своей транзакцией, точно никто не изменит, пока я не
завершу свою транзакцию (по крайней мере, в классическом понимании этого уровня с блокировками).
Это нас спасает и от грязного чтения, и от неповторяющегося чтения, но всё ещё мы не решаем проблему фантомного чтения.
Почему? Конечно, строки, которые я уже прочитал в транзакции, никто не изменит, но никто не мешает добавлять новые
строки параллельно - их мы ещё не читали, создавать их ничего не мешает.

4. Serializable (упорядочиваемость).
Самый жёсткий, но самый тяжёлый для БД и медленный для обработки запросов уровень. Он блокирует любые действия, пока
запущена транзакция — получается, транзакции идут строго одна за другой и максимально изолируются друг от друга.
Это достигается с помощью блокировки всей таблицы от любых взаимодействий с ней, но некоторые СУБД делают менее
радикально — блокируют только те строки, которые задействует текущая транзакция.
Самый высокий уровень изолированности; транзакции полностью изолируются друг от друга. Результат выполнения нескольких
параллельных транзакций должен быть таким, как если бы они выполнялись последовательно. Только на этом уровне
параллельные транзакции не подвержены эффекту «фантомного чтения».



------------------------------------------------------ ACID ------------------------------------------------------------
  Требования ACID — набор требований к транзакционной системе, обеспечивающий наиболее надёжную и предсказуемую её
работу и обеспечивают сохранность ваших данных.

1. Atomicity — Атомарность.
Атомарность гарантирует, что каждая транзакция будет выполнена полностью или не будет выполнена совсем.
Не допускаются промежуточные состояния.

2. Consistency — Согласованность
Транзакция, достигающая своего нормального завершения (EOT — end of transaction, завершение транзакции) и, тем самым,
фиксирующая свои результаты, сохраняет согласованность базы данных. Другими словами, каждая успешная транзакция по
определению фиксирует только допустимые результаты. Например, там, где должны быть положительные числа, будут
только положительные. Например, не будет ссылок на несуществующие внешние ключи.

3. Isolation — Изолированность
Во время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат. Как и она на другие.

4. Durability — Надёжность
Если пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им
изменения не будут отменены из-за какого-либо сбоя. Обесточилась система, произошел сбой в оборудовании?
На выполненную транзакцию это не повлияет. Не потеряется ни одна закоммиченная транзакция.





















