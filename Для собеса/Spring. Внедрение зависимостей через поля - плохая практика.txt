https://habr.com/ru/articles/334636/

1. Типы внедрений
Есть три основных способа внедрить ваши зависимости в класс: через конструктор, сеттер и поле. 
Давайте бегло сравним код с одними и теми же зависимостями, внедренными с помощью каждого из подходов.

------------------------------------------------- Конструктор:

private DependencyA dependencyA;
private DependencyB dependencyB;
private DependencyC dependencyC;

@Autowired
public DI(DependencyA dependencyA, DependencyB dependencyB, DependencyC dependencyC) {
    this.dependencyA = dependencyA;
    this.dependencyB = dependencyB;
    this.dependencyC = dependencyC;
}

------------------------------------------------- Сеттер

private DependencyA dependencyA;
private DependencyB dependencyB;
private DependencyC dependencyC;

@Autowired
public void setDependencyA(DependencyA dependencyA) {
    this.dependencyA = dependencyA;
}

@Autowired
public void setDependencyB(DependencyB dependencyB) {
    this.dependencyB = dependencyB;
}

@Autowired
public void setDependencyC(DependencyC dependencyC) {
    this.dependencyC = dependencyC;
}

------------------------------------------------- Поле

@Autowired
private DependencyA dependencyA;
@Autowired
private DependencyB dependencyB;
@Autowired
private DependencyC dependencyC;
----------------------------------------------------------------------------------



2. Внедрение через поля - что не так?
 - Нарушение принципа единственной ответственности.
   При использованиии внедрения через поля мы МОЖЕМ НЕ ЗАМЕТИТЬ, что в классе
   появляется всё больше и больше зависимостей, отчего этот класс нарушает
   принцип единственной ответственности в SOLID.
 - Сокрытие зависимостей.
   Без конструкторов или сеттеров непонятно, что требует класс, а также 
   опциональные ли это зависомости (через сеттеры) или обязательные (конструктор).
 - Зависимость от DI-контейнера.
   При внедрении прямо в поля вы не предоставляете прямого способа создания экземпляра 
   класса со всеми необходимыми зависимостями. Это означает, что:
   а) Существует способ (путем вызова конструктора по-умолчанию) создать объект с 
      использованием new в состоянии, когда ему не хватает некоторых из его 
      обязательных зависимостей, и использование приведет к NullPointerException
   б) Такой класс не может быть использован вне DI-контейнеров (тесты, другие модули) 
      и нет способа кроме рефлексии предоставить ему необходимые зависимости
 - Неизменность.
   В отличие от способа с использованием конструктора, внедрение через поля не может 
   использоваться для присвоения зависимостей final-полям, что приводит к тому, 
   что ваши объекты становятся изменяемыми.


3. Сеттры.
   Сеттеры следует использовать для инъекций опциональных зависимостей. Класс должен 
   быть способен функционировать, даже если они не были предоставлены. Зависимости 
   могут быть изменены в любое время после создания объекта. Это может быть, а может 
   и не быть преимуществом в зависимости от обстоятельств.


4. Конструкторы.
   Инъекция через конструкторы хороша для обязательных зависимостей — тех, которые 
   требуются для корректной функциональности объекта. Передавая их через конструктор, 
   вы можете быть уверенными в том, что объект полностью готов к использованию с 
   момента создания. Поля, присвоенные в конструкторе, также могут быть final, что 
   позволяет объекту быть полностью неизменным или как минимум защищает необходимые 
   поля.
   Одно из следствий использования внедрения через конструктор — это то что теперь 
   невозможна циклическая зависимость между двумя объектами, созданными таким образом 
   (в отличие от внедрения через сеттер). Это скорее плюс, чем ограничение, поскольку 
   следует избегать циклических зависимостей, что обычно является признаком плохой 
   архитектуры. Таким образом предотвращается подобная практика.
























