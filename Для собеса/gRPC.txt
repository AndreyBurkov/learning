  gRPC (gRPC Remote Procedure Calls) — это современный фреймворк для удаленных вызовов процедур, разработанный Google.
Он позволяет приложениям взаимодействовать друг с другом, независимо от того, на каком языке программирования они
написаны. gRPC использует HTTP/2 в качестве транспортного протокола и Protocol Buffers (protobuf) в качестве языка
сериализации данных.

  Основные особенности gRPC:
1. Производительность: Использование HTTP/2 позволяет gRPC обеспечивать более высокую производительность по сравнению с
традиционными REST API, благодаря поддержке мультиплексирования потоков и сжатия заголовков.
2. Языковая независимость: gRPC поддерживает множество языков программирования, включая C++, Java, Python, Go, Ruby и
другие. Это позволяет разработчикам использовать gRPC в различных экосистемах.
3. Сериализация данных: gRPC использует Protocol Buffers для сериализации данных, что обеспечивает компактный и
эффективный формат передачи данных.
4. Поддержка различных типов взаимодействия:
 - Unary RPC: стандартный вызов функции с одним запросом и одним ответом.
 - Server streaming RPC: клиент отправляет один запрос и получает поток ответов.
 - Client streaming RPC: клиент отправляет поток запросов и получает один ответ.
 - Bidirectional streaming RPC: оба конца могут отправлять сообщения в любом порядке.
5. Инструменты для генерации кода: gRPC предоставляет инструменты для автоматической генерации серверного и клиентского
кода на основе определений сервисов в файлах .proto.
6. Безопасность: gRPC поддерживает шифрование трафика с помощью TLS, что обеспечивает безопасность передачи данных.

  Применение:
gRPC часто используется в микросервисной архитектуре, где различные сервисы должны взаимодействовать друг с другом
эффективно и быстро. Он также подходит для приложений реального времени, таких как чаты или системы обмена сообщениями.

  Protocol Buffers - это формат сериализации данных, разработанный Google, который позволяет компактно и эффективно
передавать данные между системами. Это язык сериализации данных, разработанный Google. Он позволяет разработчикам
определять структуры данных и автоматически генерировать код для сериализации и десериализации этих данных в компактном
бинарном формате.

------------------------------------------- Protocol Buffers -----------------------------------------------------------
  Основные характеристики Protocol Buffers:
1. Компактность: Protobuf использует бинарный формат для хранения данных, что делает его более компактным по сравнению с
текстовыми форматами, такими как JSON или XML. Это позволяет уменьшить объем передаваемых данных и ускорить их обработку.
2. Языковая независимость: Protobuf поддерживает множество языков программирования, включая C++, Java, Python, Go, Ruby
и другие. Это позволяет использовать его в различных экосистемах и платформах.
3. Схемы: В Protobuf данные описываются с помощью схемы (файлы .proto), где определяются сообщения (структуры данных) и
их поля. Каждое поле имеет уникальный номер, который используется для идентификации поля в бинарном формате.
4. Обратная совместимость: Protobuf поддерживает обратную совместимость, что позволяет изменять схемы без нарушения
работы существующих приложений. Например, можно добавлять новые поля или помечать старые как устаревшие.
5. Генерация кода: На основе схемы Protobuf можно автоматически генерировать код для сериализации и десериализации на
различных языках программирования с помощью инструмента protoc.






