CAP теорема (Consistency, Availability, Partition Tolerance) — это концепция в распределённых системах, предложенная
Эриком Брюером в 2000 году. Она утверждает, что в распределённой системе невозможно одновременно обеспечить три свойства:

1. **Согласованность (Consistency)**: Все узлы системы видят одни и те же данные в одно и то же время. Если данные
обновляются на одном узле, то все другие узлы немедленно получают обновлённые данные.

2. **Доступность (Availability)**: Каждый запрос к системе получает ответ, даже если некоторые узлы недоступны. Это
означает, что система всегда отвечает на запросы, но не всегда гарантирует, что данные актуальны.

3. **Устойчивость к разделению (Partition Tolerance)**: Система продолжает функционировать, даже если сеть разделена
на части, и некоторые узлы не могут обмениваться данными друг с другом.

Согласно CAP теореме, в условиях сетевых разделений (что является обычным явлением в распределённых системах) можно
обеспечить только два из трёх свойств одновременно. Это означает, что разработчики должны делать выбор между
согласованностью и доступностью, когда возникает разделение.

### Применение CAP теоремы

CAP теорема имеет практическое применение в проектировании распределённых систем, таких как:

- **Базы данных**: Разные базы данных (например, NoSQL) могут быть спроектированы с акцентом на разные свойства CAP.
Например, базы данных, такие как Cassandra, ориентированы на доступность и устойчивость к разделению, в то время как
системы, такие как Zookeeper, обеспечивают согласованность и устойчивость к разделению.

- **Сетевые системы**: Разработчики могут использовать CAP теорему для определения архитектуры распределённых
приложений, выбор между разными стратегиями обработки данных и балансировкой нагрузки.

- **Микросервисные архитектуры**: При проектировании микросервисов важно учитывать, как сервисы будут взаимодействовать
друг с другом, особенно в условиях сетевых проблем.

CAP теорема помогает разработчикам лучше понять компромиссы, которые они делают при проектировании распределённых
систем, и принимать более обоснованные решения.