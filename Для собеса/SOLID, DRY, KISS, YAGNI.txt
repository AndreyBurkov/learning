------------------------------------------------- SOLID ----------------------------------------------------------------
https://habr.com/ru/articles/688530/
https://web-creator.ru/articles/solid

SOLID - это принципы разработки программного обеспечения, следуя которым Вы получите хороший код, который в дальнейшем
будет хорошо масштабироваться и поддерживаться в рабочем состоянии.

S - Single Responsibility Principle - принцип единственной ответственности. Каждый класс должен иметь только одну зону
ответственности.
Принцип декларирует, что каждый объект должен иметь одну обязанность и эта обязанность должна быть полностью
инкапсулирована в класс, а все его сервисы должны быть направлены исключительно на обеспечение этой обязанности.

O - Open closed Principle - принцип открытости-закрытости. Классы должны быть открыты для расширения, но закрыты для изменения.
Принцип декларирует, что программные сущности (классы, модули, функции и т. п.) должны быть открыты для расширения,
но закрыты для изменения. Это означает, что эти сущности могут менять свое поведение без изменения их исходного кода.

L - Liskov substitution Principle - принцип подстановки Барбары Лисков. Должна быть возможность вместо базового
(родительского) типа (класса) подставить любой его подтип (класс-наследник), при этом работа программы не должна измениться.
Следование принципу LSP заключается в том, что при построении иерархий наследования создаваемые наследники должны
корректно реализовывать поведение базового типа. То есть если базовый тип реализует определённое поведение, то это
поведение должно быть корректно реализовано и для всех его наследников.
Наследник класса дополняет, но не заменяет поведение базового класса. То есть в любом месте программы замена базового
класса на класс‑наследник не должна вызывать проблем. Если по каким‑то причинам так не получается, то вероятнее всего
имеет место либо некорректная реализация, либо неверно выбранная абстракция для наследования.

I - Interface Segregation Principle - принцип разделения интерфейсов. Данный принцип обозначает, что не нужно
заставлять клиента (класс) реализовывать интерфейс, который не имеет к нему отношения.
Следование принципу ISP заключается в создании интерфейсов, которые достаточно специфичны и требуют только
необходимый минимум реализаций методов. Избыточные интерфейсы, напротив, могут требовать от реализующего класса
создание большого количества методов, причём даже таких, которые не имеют смысла в контексте класса.

D - Dependency Inversion Principle - принцип инверсии зависимостей. Модули верхнего уровня не должны зависеть
от модулей нижнего уровня. И те, и другие должны зависеть от абстракции. Абстракции не должны зависеть от деталей.
Детали должны зависеть от абстракций.
  Следование принципу инверсии зависимостей «заставляет» реализовывать высокоуровневые компоненты без встраивания
зависимостей от конкретных низкоуровневых классов, что, например, сильно упрощает замену используемых зависимостей
как по бизнес‑требованиям, так и для целей тестирования. При этом зависимость формируется не от конкретной реализации,
а от абстракции — реализуемого зависимостью интерфейса.
  Например, мы реализуем хранение документов в веб‑приложении. На первый взгляд, кажется логичным добавить зависимость
от модулей работы с файловой системой непосредственно в класс, отвечающий за высокоуровневую работу с этими документами.
Но в перспективе такая зависимость может создать проблемы — например, нам потребуется хранить данные не только на диске,
но и в облаке. Если зависимость внедрена от реализации, то мы столкнёмся с необходимостью её переработки. Если же
зависимость выведена на уровень абстракции (интерфейса), то нам будет достаточно реализовать функциональность работы с
облаком, соответствующую ранее созданному интерфейсу работы с файлами.
  Принцип инверсии зависимостей часто упрощает следованию принципу подстановки Барбары Лисков. Выделение абстракций и
встраивание зависимостей от них снижает вероятность того, что в новом классе мы не полностью реализуем контракт
базового класса, который мы расширяем в рамках нового.




https://skillbox.ru/media/code/eto-klassika-eto-znat-nado-dry-kiss-solid-yagni-i-drugie-poleznye-sokrashcheniya/
------------------------------------------------- DRY ------------------------------------------------------------------
DRY – Don’t repeat yourself (не повторяй себя)
Когда пишете код, всегда думайте о том, как можно переиспользовать тот или иной фрагмент, что можно выделить в
универсальную функцию или класс, сделать модулем. При этом речь не идёт о создании библиотек под каждую не одноразовую
функцию — я имею в виду очень похожую логику, которая встречается в нескольких местах, которую, возможно, есть смысл
вынести в функцию. А если в нескольких местах определена одна и та же функция, то её можно вынести в общий модуль.
Ну и, наконец, если вы часто используете один и тот же модуль, вероятно, из него можно сделать библиотеку.

------------------------------------------------- KISS -----------------------------------------------------------------
Keep it simple, stupid («Сделай это проще, тупица») или, если кому-то не нравится называться тупицей, есть вариант
Keep it stupid simple («Пусть всё будет простым до безобразия»), который ещё лучше передаёт смысл аббревиатуры.
Решая какую-нибудь проблему, можно так увлечься, что сам не заметишь, как уже занялся оверинжинирингом или, как я люблю
говорить, вовсю палишь из пушки по воробьям. Задача в итоге, конечно, будет решена — но её можно было бы выполнить
куда проще и изящнее.

------------------------------------------------- YAGNI ----------------------------------------------------------------
You ain’t gonna need it («Вам это не понадобится»), пришёл из экстремального программирования. Согласно ему создавать
Дело в том, что в рамках Agile-методологий нужно фокусироваться только на текущей итерации проекта. Работать на
опережение, добавляя в проект больше функциональности, чем требуется в данный момент, — не очень хорошая идея,
учитывая, как быстро могут меняться планы. Какую-то функциональность следует только тогда, когда она действительно нужна.







